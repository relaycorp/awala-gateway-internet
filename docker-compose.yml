version: '3.7'
services:
  pohttp:
    build:
      dockerfile: Dockerfile.dev
      context: .
    image: relaynet-gw:local-dev
    init: true
    command: src/bin/pohttp-server.ts
    environment:
      MONGO_URI: ${MONGO_URI}
      NATS_SERVER_URL: ${NATS_SERVER_URL}
      NATS_CLUSTER_ID: ${NATS_CLUSTER_ID}
      OBJECT_STORE_BUCKET: ${OBJECT_STORE_BUCKET}
      OBJECT_STORE_ENDPOINT: ${OBJECT_STORE_ENDPOINT}
      OBJECT_STORE_ACCESS_KEY_ID: ${OBJECT_STORE_ACCESS_KEY_ID}
      OBJECT_STORE_SECRET_KEY: ${OBJECT_STORE_SECRET_KEY}
      OBJECT_STORE_TLS_ENABLED: ${OBJECT_STORE_TLS_ENABLED}
    ports:
      - '127.0.0.1:8080:8080'
    volumes:
      - ./src:/opt/gw-dev/src:ro
    links:
      - mongodb
      - nats
      - object-store

  cogrpc:
    build:
      dockerfile: Dockerfile.dev
      context: .
    image: relaynet-gw:local-dev
    init: true
    command: src/bin/cogrpc-server.ts
    environment:
      GATEWAY_KEY_ID: ${GATEWAY_KEY_ID}
      COGRPC_ADDRESS: https://cogrpc.example.com/
      MONGO_URI: ${MONGO_URI}
      NATS_SERVER_URL: ${NATS_SERVER_URL}
      NATS_CLUSTER_ID: ${NATS_CLUSTER_ID}
      PARCEL_STORE_BUCKET: ${OBJECT_STORE_BUCKET}
      OBJECT_STORE_ENDPOINT: ${OBJECT_STORE_ENDPOINT}
      OBJECT_STORE_ACCESS_KEY_ID: ${OBJECT_STORE_ACCESS_KEY_ID}
      OBJECT_STORE_SECRET_KEY: ${OBJECT_STORE_SECRET_KEY}
      OBJECT_STORE_TLS_ENABLED: ${OBJECT_STORE_TLS_ENABLED}
      VAULT_URL: ${VAULT_URL}
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_KV_PREFIX: ${VAULT_KV_PREFIX}
    ports:
      - '127.0.0.1:8081:8080'
    links:
      - mongodb
      - nats
      - object-store
      - vault
    volumes:
      - ./src:/opt/gw-dev/src:ro

  pdc-outgoing-queue-worker:
    build:
      dockerfile: Dockerfile.dev
      context: .
    image: relaynet-gw:local-dev
    init: true
    command: src/bin/pdc-outgoing-queue-worker.ts
    environment:
      POHTTP_ADDRESS: ${POHTTP_ADDRESS}
      WORKER_ID: pdc-local
      MONGO_URI: ${MONGO_URI}
      NATS_SERVER_URL: ${NATS_SERVER_URL}
      NATS_CLUSTER_ID: ${NATS_CLUSTER_ID}
      PARCEL_STORE_BUCKET: ${OBJECT_STORE_BUCKET}
      OBJECT_STORE_ENDPOINT: ${OBJECT_STORE_ENDPOINT}
      OBJECT_STORE_ACCESS_KEY_ID: ${OBJECT_STORE_ACCESS_KEY_ID}
      OBJECT_STORE_SECRET_KEY: ${OBJECT_STORE_SECRET_KEY}
      OBJECT_STORE_TLS_ENABLED: ${OBJECT_STORE_TLS_ENABLED}
    volumes:
      - ./src:/opt/gw-dev/src:ro
    links:
      - mongodb
      - nats
      - object-store

  crc-queue-worker:
    build:
      dockerfile: Dockerfile.dev
      context: .
    image: relaynet-gw:local-dev
    init: true
    command: src/bin/crc-queue-worker.ts
    environment:
      WORKER_ID: crc-local
      MONGO_URI: ${MONGO_URI}
      NATS_SERVER_URL: ${NATS_SERVER_URL}
      NATS_CLUSTER_ID: ${NATS_CLUSTER_ID}
      PARCEL_STORE_BUCKET: ${OBJECT_STORE_BUCKET}
      OBJECT_STORE_ENDPOINT: ${OBJECT_STORE_ENDPOINT}
      OBJECT_STORE_ACCESS_KEY_ID: ${OBJECT_STORE_ACCESS_KEY_ID}
      OBJECT_STORE_SECRET_KEY: ${OBJECT_STORE_SECRET_KEY}
      OBJECT_STORE_TLS_ENABLED: ${OBJECT_STORE_TLS_ENABLED}
      VAULT_URL: ${VAULT_URL}
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_KV_PREFIX: ${VAULT_KV_PREFIX}
    links: [nats, vault]
    volumes:
      - ./src:/opt/gw-dev/src:ro

  mongodb:
    image: mongo:4.0
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
    ports:
      - '127.0.0.1:27017:27017'

  nats:
    image: nats-streaming:0.17.0
    command: ['-m', '8222']
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8222/streaming/channelsz"]
    ports:
      - '127.0.0.1:4222:4222'

  vault:
    image: vault:1.3.1
    init: true
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: letmein
    cap_add: ['IPC_LOCK']
    healthcheck:
      test: ["CMD", "vault", "status", "-tls-skip-verify"]
      start_period: 10s
    ports:
      - '127.0.0.1:8200:8200'

  object-store:
    image: minio/minio:RELEASE.2020-04-04T05-39-31Z
    init: true
    command: ["server", "/data"]
    environment:
      MINIO_ACCESS_KEY: ${OBJECT_STORE_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${OBJECT_STORE_SECRET_KEY}
      MINIO_API_READY_DEADLINE: 5s
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/minio/health/ready"]
      start_period: 6s
    ports:
      - '127.0.0.1:9000:9000'
